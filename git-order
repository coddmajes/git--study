# git--study
git使用命令-mac

 
$ mkdir repository_name//创建版本库
$ cd repository_name //查看目录
$ pwd //用于显示当前目录
$ git init //将这个目录变成Git可以管理的仓库
$ ls -ah //用于显示隐藏的目录 .git
$ gedit/cat file_name //可用于打开文件查看


$ git add file_name //将文件放入git仓库，注意file必须是在repository_name的目录下，实际上就是把文件修改添加到暂存区
$ git commit -m ""//将文件提交到仓库，其中“”中可以填写备注，当前提交的版本等等，实际上就是把暂存区的所有内容提交到当前分支
$ git status //查看当前仓库的状态
$ git diff //查看修改内容
$ git diff HEAD -- file_name //查看工作区和版本库里面最新版本的区别
$ git log //查看最近到最远的提交日志
$ git log --pretty=oneline //直接显示提交日志的commit_id


$ git reset --hard HEAD^ //版本回退至上一个，如果还要回退多个，即为在HEAD^后加^,如回退上上版本，即为HEAD^^，但是如果是50个版本以前，则为HEAD~50，此时情况是你还没有将你当前的本地版本推送到远程
$ git reset HEAD file_name //可以把暂存区的修改撤销掉，用HEAD表示最新的版本
$ cat file_name //查看当前文件的内容
$ git reset --hard commit_id //指定回到未来的某个版本，即当你处在本版本以前的版本时，你想回到当前版本的办法，commit_id 可以只写前面几位
$ git reflog //用于记录你的每一次命令
$ git checkout -- file_name //把文件在工作区的修改全部撤销，A，文件自修改后还没有被放到暂存区，现在，撤销修改就会到和版本库一模一样的状态；B，文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，让这个文件回到最近一次git add 或是git commit的状态


$ rm file_name //直接删除文件，在文件管理器中
$ git rm file_name //从版本库中删除该文件，命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容


$ git remote add origin git@github.com:XXX/repository_name.git //XXX为GitHub账户名，本地关联GitHub的远程库，远程仓库的默认名称是origin，注意必须是在本地已经创建好仓库的前提下，在当前仓库的目录下进行如前的命令行
$ git push -u origin master //初次把本地库的内容推送到远程，将当前分支master推送到远程，由于远程库第一次推送是空的，加上-u参数，git不但会把本地的master分支内容推送到远程新的master分支还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
$ git push origin master //以后进行推送
$ git clone git@github.com:XXX/repository_name.git //用命令git clone克隆远程库，默认是克隆master，可以checkout 
$ git clone -b branch_name //单独克隆某个分支
$ git checkout -b branch_name origin/branch_name //从远程直接pull分支到本地，不需要在本地先创建分支


$ git checkout -b branch_name //git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
    $ git branch dev
    $ git checkout dev //branch代表你要创建并切换的分支名字
$ git branch //查看当前分支 显示中*表示你当前所在的分支
$ git merge branch_name //git merge命令用于合并指定分支（branch_name）到当前分支，Fast-forward，也就是直接把master指向dev的当前提交，但这种模式下，删除分支后，会丢掉分支信息
$ git merge —no-ff -m “” branch_name //表示合并branch_name分支，禁用Fast-forward，因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
$ git branch -d branch_name //删除当前分支


$git log —-graph —-pretty=oneline —-abbrev-commit //用带参数的git log也查看分支的合并情况，分支的合并出现冲突，如何解决，如果切换到branch_name分支时，在文件中进行了相应的修改并提交确认了，接着在master分支时，又在文件中进行了相应的修改而且也提交确认了。此种情况下，想将branch_name分支合并至master分支时，将会出现冲突。此种情况下，Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容。可以在修改文件内容，解决冲突的情况下，进行合并。用git log --graph命令可以看到分支合并图


$ git stash //把当前工作现场“储藏”起来，等之后恢复现场后继续工作
$ git stash list //查看工作现场
$ git stash pop //将暂存的工作现场恢复，恢复的同时把stash内容也删了
$ git stash apply stash@{id} //用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除

$ git branch -D branch_name //强行删除分支，如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除


$ git remote //用来查看远程库的信息
$ git remote -v //显示更加详细的信息
$ git push origin branch_name //推送指定分支
	master分支是主分支，因此要时刻与远程同步；
	dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	bug分支只用于在本地修复bug，就没必要推到远程了；
	feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
$ git checkout -b branch_name origin/branch_name //创建远程origin的branch_name分支到本地
$ git branch —set-upstream branch_name origin/branch_name //指定本地branch_name与远程origin/branch_name分支的链接
$ git pull //把最新提交的从origin/branch_name处抓取下来
多人协作的工作模式通常是这样：
	首先，可以试图用git push origin branch-name推送自己的修改；
	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	如果合并有冲突，则解决冲突，并在本地提交；
	没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	
	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name

$ git tag tag_name //为分支打标签
$ git tag //查看所有的标签，默认标签是打在最新提交的commit上的
$ git tag tag_name commit_id //为commit_id号对应的位置打标签
$ git show tag_name //查看标签信息，标签不是按时间顺序列出，而是按字母排序的，带有说明的标签，用-a指定标签名，-m指定说明文字，通过-s用私钥签名一个标签，签名采用PGP签名，因此，必须首先安装gpg（GnuPG）
$ git tag -d tag_name //删除标签，创建的标签都只存储在本地，不会自动推送到远程。打错的标签可以在本地安全删除
$ git push origin tag_name //推送某个标签到远程
$ git push origin —tags //一次从推送全部标签到远程
$ git push origin :refs/tags/tag_name //从远程删除标签，首先应该在本地删除标签


$ git config —-global color.ui true //git配置，显示颜色
$ git add -f file_name //强制添加文件
$ git check-ignore -v file_name //查看被忽略的文件
	忽略某些文件时，需要编写.gitignore；
	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
	https://github.com/github/gitignore 可以查看所有配置文件

忽略文件的原则是：

忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件


$ git config —global alias.another_order_name order_name //将某个命令用别名显示，配置别名，--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用，配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用
$ git log -1 //显示最近一次的提交
$ cat .git/config //每个仓库的git配置文件
$ cat .gitconfig //当前用户的git配置文件


搭建git服务器

搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：

$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：

$ sudo adduser git
第三步，创建证书登录：

收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：

先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

$ sudo chown -R git:git sample.git
第五步，禁用shell登录：

出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

git:x:1001:1001:,,,:/home/git:/bin/bash
改为：

git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：

现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥

如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。

管理权限

有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。
